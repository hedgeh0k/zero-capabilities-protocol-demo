version: "3.9"

services:
  # The issuer is responsible for one-time key generation and capability
  # delegation.  It writes its output into a shared volume so that
  # dataset servers and the client UI can consume the keys and
  # capabilities without any network calls. This container exits
  # after finishing its work.
  issuer:
    build:
      context: .
      dockerfile: packages/issuer/Dockerfile
    # A shared volume that all services mount read only except for the
    # issuer. It contains keys.json and four capability documents.
    volumes:
      - caps:/caps
    command: [ "node", "dist/index.js" ]

  # Party A hosts the primary dataset.
  party-a:
    build:
      context: .
      dockerfile: packages/dataset-server/Dockerfile
    environment:
      # The domain indicates who owns the dataset served by this
      # container. It is used when verifying capabilities and logging.
      DOMAIN: "a.example.com"
      DATA_DIR: "/data/root"
    volumes:
      - ./packages/dataset-server/data:/data:ro
      - caps:/caps:ro
    ports:
      - "4100:3000"
    depends_on:
      issuer:
        condition: service_completed_successfully
    networks:
      default:
        aliases:
          - a.example.com

  # Party B hosts its own dataset. This reuses the same dataset
  # server code as party A. The domain and port differ. Note that
  # both servers mount the same capability volume read only.
  party-b:
    build:
      context: .
      dockerfile: packages/dataset-server/Dockerfile
    environment:
      DOMAIN: "b.example.com"
      DATA_DIR: "/data/derived"
    volumes:
      - ./packages/dataset-server/data:/data:ro
      - caps:/caps:ro
    ports:
      - "4200:3000"
    depends_on:
      issuer:
        condition: service_completed_successfully
    networks:
      default:
        aliases:
          - b.example.com

  # The client UI acts on behalf of user C. It reads the keys and
  # capability files generated by the issuer and presents an HTML
  # interface listing the four scenarios. When a scenario is
  # selected the UI makes an HTTP request to the appropriate dataset
  # server, attaching the caller DID and capability id in headers.
  ui:
    build:
      context: .
      dockerfile: packages/client-ui/Dockerfile
      args:
        CLIENT_LABEL: "UserC"
    volumes:
      - caps:/caps:ro
    ports:
      - "4500:8080"
    depends_on:
      party-a:
        condition: service_started
      party-b:
        condition: service_started

volumes:
  caps: { }
